name: Deploy Backend to Cloud Run

on:
  push:
    branches:
      - main 

env:
  PROJECT_ID: 'e-commerce-pps-mvp
 # ¡IMPORTANTE! Reemplaza con tu ID real de GCP
  SERVICE_NAME: ecommerce-pps-backend
  REGION: us-central1 
  IMAGE_NAME: backend-image

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Checkout del Código
        uses: actions/checkout@v4

      - name: 2. Configurar Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 3. Integración Continua (Compilar y Ejecutar Tests)
        run: mvn clean install
        # Justificación: Ejecuta tests y genera el JAR.

      - name: 4. Autenticar en Google Cloud Platform (GCP)
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}' # Secreto de GitHub
        
      - name: 5. Configurar Docker y Login en Artifact Registry
        uses: 'docker/login-action@v3'
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_CREDENTIALS }}
        
      - name: 6. Construir y Subir Imagen Docker a Artifact Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest

      - name: 7. Desplegar a Cloud Run
        id: 'deploy'
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
          region: ${{ env.REGION }}
          # Inyección de variables de entorno de BD
          env_vars: DB_URL=${{ secrets.DB_URL }}, DB_USER=${{ secrets.DB_USER }}, DB_PASSWORD=${{ secrets.DB_PASSWORD }}

      - name: 8. Prueba Smoke Final (CD)
        run: curl --fail ${{ steps.deploy.outputs.url }}/api/health
        # Justificación: Llama al HealthController.java para asegurar 200 OK.

        ###automatizacion